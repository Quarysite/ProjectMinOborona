#include<iostream>
#include<fstream>
#include<limits>
#include<conio.h>
#include<stdlib.h>
#include<string>

using namespace std;
int GetIdForEdit();
int GetIdForEditionalVer();
void Search(int a);

struct Book
{
	static const int BUFFER_SIZE = 20;
	int Id = -1; // уникальный номер
	char Name[BUFFER_SIZE]; // имя человека
	char Surn[BUFFER_SIZE]; // фамилия человека
	char Patr[BUFFER_SIZE]; // отчество человека
	char Pasport[BUFFER_SIZE]; // номер паспорта
	int choice; // номер кандидата, за которого голосует человек
};
const int BookDataSize = sizeof(Book);
const std::string fileName = "books.bin";

int main()
{
	setlocale(0, "");
	cout << "Выберите режим : " << endl << "1 - Добавить голос;" << endl << "0 - закрыть программу" << endl << "3 - Поиск по паспорту" << endl << "4 - Сортировка по фамилии" << endl  << "0 - Закрыть программу" << endl;
	int mode = 0;
	cin >> mode;
	cin.ignore(numeric_limits<int>::max(), '\n');
	
	if (mode == 1)
	{
		//fileOut.open(FileName, iostream::out | iostream::binary | iostream::ate | iostream::in); //редактирование ]
		system("cls");

		Book appBooked;
		cout << "You have chosen Edit mode." << endl;
		cout << "Enter the Id of Booklist" << endl;
		int bookedId = GetIdForEditionalVer();

		appBooked.Id = bookedId;
		cout << endl << "Enter your name : ";
		cin >> appBooked.Name;
		cin.ignore(numeric_limits<int>::max(), '\n');
		cout << endl;
		cout << "Enter surname : ";
		cin >> appBooked.Surn;
		cin.ignore(numeric_limits<int>::max(), '\n');
		cout << endl;
		cout << "Enter the new book price : ";
		cin >> appBooked.Patr;
		cin.ignore(numeric_limits<int>::max(), '\n');
		cout << endl;
		cout << "Enter the new books quantity : ";
		cin >> appBooked.choice;
		cin.ignore(numeric_limits<int>::max(), '\n');
		cout << endl;

		fstream fileOut;
		fileOut.open(fileName, ios::out | ios::binary | ios::ate | ios::in); //запись в файл
		fileOut.seekg((bookedId - 1) * BookDataSize);
		fileOut.write(reinterpret_cast<char*>(&appBooked), BookDataSize);
		fileOut.close();

		system("pause");
		system("cls");
		main();
	}
	else if (mode == 3)
	{
		system("cls");

		char stringToFind[Book::BUFFER_SIZE];
		cout << "Введите номер паспорта : ";
		cin >> stringToFind;
		cin.ignore(numeric_limits<int>::max(), '\n');
		cout << endl;

		ifstream GetTitele;
		Book reader;

		GetTitele.open(fileName, ios::binary);
		for (int i = 0; i < GetIdForEdit(); ++i)
		{
			GetTitele.seekg(i * BookDataSize);
			GetTitele.read(reinterpret_cast<char*>(&reader), BookDataSize);
			if (strcmp(reader.Pasport, stringToFind) == 0)
			{
				Search(i + 1);
			}
		}
		GetTitele.close();

		system("pause");
		system("cls");
		main();
	}
	else if (mode == 4)
	{
		system("cls");
		cout << "loading..." << endl;
		//сортировка по Фамилии
		Book* sorted = new Book[GetIdForEdit()];
		ifstream getBooklist;
		int lenghtoflist = GetIdForEdit();
		getBooklist.open(fileName, ios::binary);
		for (int i = 0; i < lenghtoflist; ++i)
		{
			getBooklist.seekg(i * BookDataSize);
			getBooklist.read(reinterpret_cast<char*>(&sorted[i]), BookDataSize);
		}
		getBooklist.close();
		system("cls");

		for (int i = 0; i < lenghtoflist - 1; ++i)
		{
			for (int j = 0; j < lenghtoflist - 1 - i; ++j)
			{
				if (strcmp(sorted[j].Surn, sorted[j + 1].Surn) > 0)
				{
					Book temp = sorted[j];
					sorted[j] = sorted[j + 1];
					sorted[j + 1] = temp;
				}

			}
		}

		for (int i = 0; i < lenghtoflist; ++i)
		{
			cout << "Id : " << sorted[i].Id << endl;
			cout << "Фамилия : " << sorted[i].Surn << endl;
			cout << "Имя : " << sorted[i].Name << endl;
			cout << "Отчество : " << sorted[i].Patr << endl;
			cout << "Паспорт : " << sorted[i].Pasport<< endl << endl;
			cout << "Голос за кандидата : " << sorted[i].choice << endl << endl;
		}

		system("pause");
		system("cls");
		main();
	}
	
	else if (mode == 10101)
	{
		Search(10101);
		system("pause");
		system("cls");
		main();
	}
	else if (mode == 0)
	{
		return 0;
	}
	else
	{
		system("cls");
		main();
	}
}
int GetIdForEditionalVer()
{
	std::ifstream idIn;
	idIn.open(fileName, std::ios::binary);
	idIn.seekg(0, std::ios_base::end);
	int size = idIn.tellg();
	idIn.seekg(size - BookDataSize);
	Book newid;
	int temp = 0;
	idIn.read(reinterpret_cast<char*>(&newid), BookDataSize);
	temp = newid.Id + 1;
	idIn.close();

	Book member;
	member.Id = temp;
	member.Name;
	member.Surn;
	member.Patr;
	member.choice;

	fstream fileOut;
	fileOut.open(fileName, iostream::out | iostream::binary | iostream::app); //добавление в фаил без редактирования 
	fileOut.write(reinterpret_cast<char*>(&member), BookDataSize);
	fileOut.close();

	return temp;
}
int GetIdForEdit()
{
	std::ifstream idIn;
	idIn.open(fileName, std::ios::binary);
	idIn.seekg(0, std::ios_base::end);
	int size = idIn.tellg();
	idIn.seekg(size - BookDataSize);
	Book newid;
	int temp = 0;
	idIn.read(reinterpret_cast<char*>(&newid), BookDataSize);
	temp = newid.Id;
	idIn.close();

	return temp;
}
void Search(int a)
{
	if (a == 10101)
	{
		cout << "Input the Book Id: ";
		int bookId = 0;
		cin >> bookId;
		cin.ignore(numeric_limits<int>::max(), '\n'); //ограничение буффера(чистка)
		cout << endl;
		if (bookId - 1 < 0)
			bookId = 1;
		ifstream LookinForBookId;
		LookinForBookId.open(fileName, ios::binary);
		Book currentBook;
		LookinForBookId.seekg((bookId - 1) * BookDataSize);
		LookinForBookId.read(reinterpret_cast<char*>(&currentBook), BookDataSize);
		LookinForBookId.close();
		cout << "Данные голосуещего : " << endl;
		cout << "Id : " << currentBook.Id << endl;
		cout << "Имя : " << currentBook.Name << endl;
		cout << "Фамилия : " << currentBook.Surn << endl;
		cout << "Отчество : " << currentBook.Patr << endl;
		cout << "Номер кандидата : " << currentBook.choice << endl;
	}
	else if (a != 0)
	{
		if (a - 1 < 0)
		{
			a = 1;
		}
		ifstream LookinForBookId;
		LookinForBookId.open(fileName, ios::binary);
		Book currentBook;
		LookinForBookId.seekg((a - 1) * BookDataSize);
		LookinForBookId.read(reinterpret_cast<char*>(&currentBook), BookDataSize);
		LookinForBookId.close();
		cout << "Your Book date is : " << endl;
		cout << "Id : " << currentBook.Id << endl;
		cout << "Title : " << currentBook.Name << endl;
		cout << "Author : " << currentBook.Surn << endl;
		cout << "Price : " << currentBook.Patr << endl;
		cout << "Quantity : " << currentBook.choice << endl;
	}
}
